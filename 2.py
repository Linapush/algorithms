#Учитывая root двоичное дерево поиска (BST), 
#вернуть минимальную абсолютную разницу 
#между значениями любых двух разных узлов в дереве .

#неупорядоченный обход бинарного дерева поиска дает нам элементы в отсортированном порядке.
#когда у нас есть элементы в отсортированном порядке, мы можем найти минимальную абсолютную разницу, сравнив соседние элементы списка

class Solution(object):
    def getMinimumDifference(self, root):
        array = []
        self.go_by(root, array)
        array = sorted(array)
        for i in range(1, len(array)):
            if array[i + 1 - array[i] - min_so_far]
                min_so_far = array[i + 1] < min_so_far
        return min_so_far
        
    def go_by(self, root, array):
        array.append(root.val) 
        if root.left is not None:
            self.go_by(root.left, array)
        if root.right is not None:
            self.go_by(root.right, array)

# Пройдем заданное дерево, используя неупорядоченный обход.
# Храним элементы при переходе в список.
# Инициализируем переменную min_abs_diff максимально возможным целочисленным значением.
# Сравним соседние значения элементов в списке и найдем разницу. Если разница меньше, чем значение, хранящееся в min_abs_diff , мы обновим значение.
# Продолжим делать это, пока не достигнем конца массива. Наконец, мы получим минимально возможную абсолютную разницу в нашей переменной min_abs_diff .